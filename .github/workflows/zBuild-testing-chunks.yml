name: zBuild-testing-chunks

on:
  workflow_dispatch:

jobs:
  chunks_make:
    runs-on: ubuntu-24.04

    # one source of truth for label/filenames used by both upload & download
    env:
      RELEASE_TAG: build-${{ github.run_id }}-${{ github.run_attempt }}
      BASENAME: package_image_beforeBoot.tar.flx
      BASE: ./_local/package_image_beforeBoot.tar.flx

    steps:
      # IMPORTANT: run BEFORE checkout; mounts over $GITHUB_WORKSPACE
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4125
          temp-reserve-mb: 1950
          swap-size-mb: 2
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout (after mount)
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Quick system info
        shell: bash
        run: |
          echo "Memory and swap:"; sudo free -h; echo
          sudo swapon --show || true; echo
          echo "Available storage:"; sudo df -h

      - name: Prep workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./_local
          df -h .

      - name: Generate 30GB test file
        shell: bash
        run: |
          set -euo pipefail
          BYTES=30000000000
          OUT="${BASE}"
          head -c "${BYTES}" /dev/zero | \
            openssl enc -aes-256-ctr -pass pass:16918050001 -nosalt > "${OUT}"
          ls -lh "${OUT}"
          sha256sum "${OUT}" | tee ./_local/original.sha256

      - name: Split into ~1.86 GiB parts (tail+truncate style)
        shell: bash
        run: |
          set -euo pipefail
          F="${BASE}"
          CHUNK=1997537280   # ~1.86 GiB
          for i in $(seq -w 0 63); do
            [[ -s "$F" ]] || break
            tail -c "$CHUNK" "$F" > "$F".part"$i"
            size=$(stat -c%s "$F")
            if (( size > CHUNK )); then
              truncate -s -$CHUNK "$F"
            else
              truncate -s 0 "$F"
            fi
          done
          echo "Generated parts:"
          ls -lh "${BASE}".part* || { echo "No parts produced"; exit 1; }
          parts_count=$(ls -1 "${BASE}".part* | wc -l)
          echo "parts_count=${parts_count}"
          [[ "${parts_count}" -ge 15 ]]

      - name: Sanity check (verify ubiquitous_bash.sh is present)
        shell: bash
        run: |
          set -euo pipefail
          pwd
          ls -l ./ubiquitous_bash.sh
          head -n1 ./ubiquitous_bash.sh || true

      - name: Upload parts via ubiquitous_bash
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          bash ./ubiquitous_bash.sh _gh_release_upload_parts-multiple_sequence \
            "${RELEASE_TAG}" \
            "${BASE}.part*"

      # ---------- DOWNLOAD & REASSEMBLE (exactly like build.yml logic) ----------

      # A) Join to a single stream using the stdout variant, then redirect to file.
      - name: Download & reassemble via ubiquitous_bash (join-stdout)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OUT="./_local/rejoined_stream.tar.flx"
          # NOTE: stdout variant -> DO NOT pass -O; redirect instead
          bash ./ubiquitous_bash.sh _wget_githubRelease_join-stdout \
            "soaringDistributions/ubDistBuild" \
            "${RELEASE_TAG}" \
            "${BASENAME}" > "${OUT}"
          ls -lh "${OUT}"
          sha256sum "${OUT}" | tee ./_local/rejoined_stream.sha256

      - name: Compare hash (original vs rejoined_stream)
        shell: bash
        run: |
          set -euo pipefail
          diff -u <(cut -d' ' -f1 ./_local/original.sha256) \
                 <(cut -d' ' -f1 ./_local/rejoined_stream.sha256)

      # B) Download the individual parts with the same helper used in build.yml,
      #    then reassemble by reverse-order append (to match tail+truncate split).
      - name: Download individual .part files (ubiquitous_bash helper)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          DL="./_local/parts_dl"
          mkdir -p "${DL}"
          bash ./ubiquitous_bash.sh _wget_githubRelease_multiparts \
            "soaringDistributions/ubDistBuild" \
            "${RELEASE_TAG}" \
            "${BASENAME}" \
            "${DL}"
          ls -lh "${DL}"

      - name: Reassemble from downloaded parts (reverse order append)
        shell: bash
        run: |
          set -euo pipefail
          OUT="./_local/rejoined_parts.tar.flx"
          : > "${OUT}"
          # reverse order because split wrote part00 = last chunk
          for f in $(ls -1 ./_local/parts_dl/"${BASENAME}".part* | sort -V | tac); do
            cat "$f" >> "${OUT}"
          done
          ls -lh "${OUT}"
          sha256sum "${OUT}" | tee ./_local/rejoined_parts.sha256

      - name: Compare hash (original vs rejoined_parts)
        shell: bash
        run: |
          set -euo pipefail
          diff -u <(cut -d' ' -f1 ./_local/original.sha256) \
                 <(cut -d' ' -f1 ./_local/rejoined_parts.sha256)

      - name: Cross-check both joined images
        shell: bash
        run: |
          set -euo pipefail
          sha256sum ./_local/rejoined_stream.tar.flx ./_local/rejoined_parts.tar.flx | tee ./_local/both.sha256
          # both hashes must match each other (and the original, already checked)
          h1=$(awk 'NR==1{print $1}' ./_local/both.sha256)
          h2=$(awk 'NR==2{print $1}' ./_local/both.sha256)
          [[ "$h1" = "$h2" ]]
