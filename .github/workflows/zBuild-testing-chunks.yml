name: zBuild-testing-chunks

on:
  workflow_dispatch:

jobs:
  chunks_make:
    runs-on: ubuntu-24.04

    # Make these available to every step (prevents "unbound variable" with set -u)
    env:
      RELEASE_TAG: build-${{ github.run_id }}-${{ github.run_number }}
      BASENAME: package_image_beforeBoot.tar.flx
      BASE: ./_local/package_image_beforeBoot.tar.flx

    steps:
      # IMPORTANT: run this BEFORE checkout; it mounts over $GITHUB_WORKSPACE
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4125
          temp-reserve-mb: 1950
          swap-size-mb: 2
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout (after mount)
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Quick system info
        shell: bash
        run: |
          echo "Memory and swap:"
          sudo free -h
          echo
          sudo swapon --show || true
          echo
          echo "Available storage:"
          sudo df -h

      - name: Prep workspace
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./_local
          df -h .

      - name: Generate 30GB test file
        shell: bash
        run: |
          set -euo pipefail
          BYTES=30000000000
          # Fast pseudo-random stream: /dev/zero piped into AES-CTR
          head -c "${BYTES}" /dev/zero \
            | openssl enc -aes-256-ctr -pass pass:16918050001 -nosalt \
            > "${BASE}"
          ls -lh "${BASE}"
          stat -c 'size=%s' "${BASE}"

      - name: Hash original (before split)
        shell: bash
        run: |
          set -euo pipefail
          sha256sum "${BASE}" | tee ./._orig.sha256

      - name: Split into ~1.86 GiB parts (tail+truncate style)
        shell: bash
        run: |
          set -euo pipefail
          F="${BASE}"
          CHUNK=1997537280   # ~1.86 GiB (ubDistBuild convention)
          for i in $(seq -w 0 63); do
            [[ -s "$F" ]] || break
            tail -c "$CHUNK" "$F" > "$F".part"$i"
            size=$(stat -c%s "$F")
            if (( size > CHUNK )); then
              truncate -s -$CHUNK "$F"
            else
              truncate -s 0 "$F"
            fi
          done
          echo "Generated parts:"
          ls -lh "${BASE}".part* || { echo "No parts produced"; exit 1; }
          parts_count=$(ls -1 "${BASE}".part* | wc -l)
          echo "parts_count=${parts_count}"
          [[ "${parts_count}" -ge 15 ]]

      - name: Sanity check (verify ubiquitous_bash.sh is present)
        shell: bash
        run: |
          set -euo pipefail
          pwd
          df -h .
          ls -l ./ubiquitous_bash.sh || { echo "script missing"; exit 1; }
          head -n1 ./ubiquitous_bash.sh || true

      - name: Upload parts via ubiquitous_bash
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          bash ./ubiquitous_bash.sh _gh_release_upload_parts-multiple_sequence \
            "${RELEASE_TAG}" \
            "${BASE}.part"*

      # === DOWNLOAD + REASSEMBLE (stream-join like build.yml) ===
      - name: Download & reassemble via ubiquitous_bash (join-stdout)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OUT="./_local/rejoined_stream.tar.flx"
          # Use ubiquitous_bash helper:
          # _wget_githubRelease_join-stdout <owner/repo> <releaseLabel> <baseFilename> -O <outfile>
          bash ./ubiquitous_bash.sh _wget_githubRelease_join-stdout \
            "${{ github.repository }}" \
            "${RELEASE_TAG}" \
            "${BASENAME}" \
            -O "${OUT}"
          ls -lh "${OUT}"
          sha256sum "${OUT}" | tee ./._rejoined_stream.sha256

      - name: Compare hash (original vs rejoined_stream)
        shell: bash
        run: |
          set -euo pipefail
          ORIG=$(cut -d' ' -f1 ./._orig.sha256)
          JOIN=$(cut -d' ' -f1 ./._rejoined_stream.sha256)
          echo "ORIG=${ORIG}"
          echo "JOIN=${JOIN}"
          if [[ "${ORIG}" == "${JOIN}" ]]; then
            echo "success match (stream join)"
          else
            echo "failure mismatch (stream join)"
            exit 1
          fi

      # === OPTIONAL: DOWNLOAD EVERY PART & REJOIN LOCALLY ===
      - name: Download individual .part files (GitHub CLI)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh --version
          mkdir -p ./_local/dl_parts
          gh release download \
            --repo "${{ github.repository }}" \
            --tag  "${RELEASE_TAG}" \
            --dir  ./_local/dl_parts \
            --pattern "${BASENAME}.part*" \
            --clobber
          echo "Downloaded parts:"
          ls -lh ./_local/dl_parts

      - name: Reassemble from downloaded parts (reverse order append)
        shell: bash
        run: |
          set -euo pipefail
          OUT2="./_local/rejoined_from_parts.tar.flx"
          rm -f "${OUT2}"
          # ubDistBuild parts are named so part00 is the last chunk; join in reverse order
          ( cd ./_local/dl_parts && ls -1 "${BASENAME}.part"* | sort -r ) | while read -r p; do
            dd if="./_local/dl_parts/$p" bs=1M status=none >> "${OUT2}"
          done
          ls -lh "${OUT2}"
          sha256sum "${OUT2}" | tee ./._rejoined_parts.sha256

      - name: Compare hash (original vs rejoined_parts)
        shell: bash
        run: |
          set -euo pipefail
          ORIG=$(cut -d' ' -f1 ./._orig.sha256)
          JOIN=$(cut -d' ' -f1 ./._rejoined_parts.sha256)
          echo "ORIG=${ORIG}"
          echo "JOIN=${JOIN}"
          if [[ "${ORIG}" == "${JOIN}" ]]; then
            echo "success match (parts join)"
          else
            echo "failure mismatch (parts join)"
            exit 1
          fi

      # Belt-and-suspenders: both joined images should be identical
      - name: Cross-check both joined images
        shell: bash
        run: |
          set -euo pipefail
          diff -q ./_local/rejoined_stream.tar.flx ./_local/rejoined_from_parts.tar.flx && echo "joined images identical"
